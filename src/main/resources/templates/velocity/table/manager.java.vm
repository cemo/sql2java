##$Id: manager.java.vm,v 1.12 2005/10/17 09:09:59 framiere Exp $
#parse( "header.include.vm" )
#parse( "table.variables.include.vm" )
$codewriter.setCurrentJavaFilename("$table.getPackage()", "${managerClass}.java")
package $table.getPackage();

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import javax.sql.DataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

#foreach ($linkedPackage in $linkedPackages)
import ${linkedPackage}.*;
#end

/**
 * Handles database calls (save, load, count, etc...) for the $tablename table.
#if ( $codewriter.hasRemarks() )
 * Remarks: $codewriter.getRemarks()
#end
 */
public class $managerClass extends BaseManager<$beanClass>
{
    private static final Logger log = LoggerFactory.getLogger(${managerClass}.class.getName());

#foreach ( $column in $columns ) #set ( $vcmo = $velocityCount - 1 )
    /**
     * Identify the $column.getName() field.
     */
    public static final int ID_$column.getConstName() = $vcmo;

#end
    /**
     * Contains all the full fields of the $tablename table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
#foreach ( $column in $columns )
        #if ( $velocityCount > 1 ),#end"$column.getFullName()"
#end
    };

    /**
     * Contains all the fields of the $tablename table.
     */
    private static final String[] FIELD_NAMES =
    {
#foreach ( $column in $columns )
        #if ( $velocityCount > 1 ),#end"$column.getName()"
#end
    };

    /**
     * Field that contains the comma separated fields of the $tablename table.
     */
    public static final String ALL_FULL_FIELDS = #foreach( $column in $columns )
#if ( $velocityCount > 1 )

                            + ",#else"#end$column.getFullName()"#end;

    /**
     * Field that contains the comma separated fields of the $tablename table.
     */
    public static final String ALL_FIELDS = #foreach( $column in $columns )
#if ( $velocityCount > 1 )

                            + ",#else"#end$column.getName()"#end;

    /**
     * Constructor
     */
    public $managerClass(DataSource dataSource)
    {
        super(dataSource);
    }

    /**
     * Creates a new $beanClass instance.
     *
     * @return the new $beanClass
     */
    public $beanClass create$beanClass()
    {
        return new $beanClass();
    }

    /**
     * Creates a new $beanClass instance.
     *
     * @return the new $beanClass
     */
    public $beanClass createBean()
    {
        return create$beanClass();
    }

    /**
     * Table managed by this manager
     *
     * @return tablename
     */
    public String getTableName()
    {
        return "$tablename";
    }

#if ( $primaryKeys.size() > 0 )
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

#set ( $keys = "" )
#foreach ( $pk in $primaryKeys )
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#end
#set ( $keys = "$keys${pk.getJavaType()} $strUtil.getVarName($pk)" )
#end
##set ( $noWhereSelect = "SELECT \" + ALL_FIELDS + \" FROM \" + $tablename" )
##set ( $baseSelect = "$noWhereSelect WHERE " )
#set ( $sql = "" )
#foreach( $pk in $primaryKeys )
#if ( $velocityCount > 1 )#set ( $sql = "$sql and " )#end
#set ( $sql = "$sql$pk.getName()=?" )
#end
    /**
     * Loads a $beanClass from the $tablename using its key fields.
     *
     * @return a unique $beanClass
     */
    //1
    public $beanClass loadByPrimaryKey($keys) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM $tablename WHERE $sql");
            if (log.isTraceEnabled()) log.trace("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
#foreach( $pk in $primaryKeys )
            $pk.getPreparedStatementMethod($strUtil.getVarName($pk), $velocityCount)
#end
            List<$beanClass> pReturn = loadByPreparedStatement(ps);
            if (pReturn.size() < 1)
                return null;
            else
                return pReturn.get(0);
        }
        finally
        {
            close(ps);
            releaseConnection(c);
        }
    }

#set ( $sql = "" )
#foreach( $pk in $primaryKeys )
#if ( $velocityCount > 1 )#set ( $sql = "$sql and " )#end
#set ( $sql = "$!sql$pk.getName()=?" )
#end
    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey($keys) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM $tablename WHERE $sql");
            if (log.isTraceEnabled()) log.trace("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
#foreach( $pk in $primaryKeys )
            $pk.getPreparedStatementMethod($strUtil.getVarName($pk), $velocityCount)
#end
            return ps.executeUpdate();
        }
        finally
        {
            close(ps);
            releaseConnection(c);
        }
    }
#end
## ======================================================
## xForeignKeys template
## ======================================================
#set ( $keysDone = [] )
#set ( $keysImported = [] )
#foreach ($impKey in $foreignKeys)
#if ( $velocityCount == 1 )

    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
#end
#set ( $importedtable = $impKey.getForeignColumn().getTableName() )
#set ( $importedClass = "${strUtil.getBeanClass($importedtable)}" )
#set ( $importedClassManager = "${strUtil.getManagerClass($importedtable)}" )
#if ( !$keysImported.contains( $importedClass ) )
#if ( $keysImported.add($importedClass) )#*squelch*##end
    /**
     * Retrieves the $importedClass object from the $tablename.$impKey.getName() field.
     *
     * @param bean the $beanClass
     * @return the associated $importedClass bean
     */
    //3 GET IMPORTED
    public $importedClass[] get${importedClass}s($beanClass bean) throws SQLException
    {
        $importedClass other = ${importedClassManager}.getInstance().create${importedClass}();
        other.${strUtil.getSetMethod($impKey.getForeignColumn())}(bean.${strUtil.getGetMethod($impKey)}());
        return ${importedClassManager}.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the $beanClass object to the $importedClass object.
     *
     * @param bean the $beanClass object to use
     * @param beanToSet the $importedClass object to associate to the $beanClass
     * @return the associated $importedClass bean
     */
    //4 SET IMPORTED
    public $beanClass set${importedClass}($beanClass bean,$importedClass beanToSet)
    {
        bean.${strUtil.getSetMethod($impKey)}(beanToSet.${strUtil.getGetMethod($impKey.getForeignColumn())}());
        return bean;
    }

#end
#end

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves a List of $beanClass given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting $beanClass table
     */
    //9
    public List<$beanClass> loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "SELECT " + ALL_FIELDS + " FROM $tablename " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" FROM $tablename ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        if (log.isTraceEnabled()) log.trace("loadByWhere: " + sql);
        try
        {
            c = getConnection();
            st = c.createStatement();
            rs = st.executeQuery(sql);
            return decodeResultSet(rs, fieldList, startRow, numRows);
        }
        finally
        {
            sql = null;
            close(st, rs);
            releaseConnection(c);
        }
    }

    /**
     * Deletes rows from the $tablename table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    //11
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM $tablename " + where);
            if (log.isTraceEnabled()) log.trace("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        finally
        {
            close(ps);
            releaseConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Insert the $beanClass bean into the database.
     *
     * @param bean the $beanClass bean to be saved
     * @param orUpdate on duplicate key update
     * @param delayed use INSERT DELAYED and don't get generated keys
     */
    //13
    public $beanClass insert($beanClass bean, boolean orUpdate, boolean delayed) throws SQLException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = getConnection();
##-------------writePreInsert
#set( $genKeyRetrieve = $codewriter.getProperty("generatedkey.retrieve", "") )
#set ( $hint = $codewriter.getProperty("generatedkey.statement").replaceAll("<TABLE>", $tablename) )
#if ( $primaryKeys.size() > 0 )#set ( $pKey = $primaryKeys.get(0) )#end
#if ( $genKeyRetrieve == "before" && $primaryKeys.size() == 1 && $pKey.isColumnNumeric() )
            if (!bean.$strUtil.getModifiedMethod($pKey)())
            {
                StringBuffer hint = new StringBuffer("$hint");
                if (log.isTraceEnabled()) log.trace("generatedKey : " + hint);

                ps = c.prepareStatement(hint.toString());
                ResultSet rs = null;
                try
                {
                    rs = ps.executeQuery();
                    if(rs.next())
                        bean.$strUtil.getSetMethod($pKey)($pKey.getResultSetMethodObject("1"));
                    else
                        log("ATTENTION: Could not retrieve generated key!");
                }
                finally
                {
                    close(ps, rs);
                    ps=null;
                }
            }
#end
##------------/writePreInsert
            int _dirtyCount = 0;
#set ( $isPresentLock = $codewriter.isPresentLock( $columns ) )
#if ( $isPresentLock )
#set ($lockColumn = $codewriter.getLockColumn($columns))
        bean.$strUtil.getSetMethod($lockColumn)(new $lockColumn.getJavaType()(String.valueOf(System.curentTimeMillis())));

#end
            sql = new StringBuffer();
            if (delayed) sql.append("INSERT DELAYED into $tablename (");
            else sql.append("INSERT into $tablename (");

#foreach( $column in $columns )
            if (bean.$strUtil.getModifiedMethod($column)()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("$column.getName()");
                _dirtyCount++;
            }

#end
            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");

#if ( $genKeyRetrieve == "auto" )
#set( $prestArgs = "Statement.RETURN_GENERATED_KEYS" )
#else
#set( $prestArgs = "ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY" )
#end

 	    if (orUpdate) {
 		sql.append(" ON duplicate KEY UPDATE ");
                boolean useComma=false;
#foreach( $column in $columns )

                if (bean.$strUtil.getModifiedMethod($column)()) {
                    if (useComma) {
                        sql.append(",");
                    } else {
                        useComma=true;
                    }
                    sql.append("$column.getName()").append("=VALUES(").append("$column.getName()").append(")");
                }
#end

	    }

            if (log.isTraceEnabled()) log.trace("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(),
                                    $prestArgs);

            fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
##------------------writePostInsert
#if ( $primaryKeys.size() == 1 )
#set($pKey = $primaryKeys.get(0))
#if ( $pKey.isColumnNumeric() )
#set ( $hint = $codewriter.getProperty("generatedkey.statement").replaceAll("<TABLE>", $tablename) )
#if ( $genKeyRetrieve == "after" )

            if (!bean.$strUtil.getModifiedMethod($pKey)())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("$hint");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.$strUtil.getSetMethod($pKey)($pKey.getResultSetMethodObject("1"));
                    } else {
                        log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    close(ps2, rs);
                }
            }
#elseif ( $genKeyRetrieve == "auto" )
            if (!bean.$strUtil.getModifiedMethod($pKey)() && !delayed)
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next())
                        bean.$strUtil.getSetMethod($pKey)($pKey.getResultSetMethodObject("1"));
                    else
                        log("ATTENTION: Could not retrieve auto generated key!");
                } finally {
                    close(rs);
                }
            }
#end
#end
#end
##-------------------/writePostInsert

            bean.isNew(false);
            bean.resetIsModified();
            return bean;
        }
        finally
        {
            sql = null;
            close(ps);
            releaseConnection(c);
        }
    }

    /**
     * Update the $beanClass bean record in the database according to the changes.
     *
     * @param bean the $beanClass bean to be updated
     */
    //14
    public $beanClass update($beanClass bean) throws SQLException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return save(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = getConnection();

#if ( $primaryKeys.size() == 0 )
$codewriter.log("    WARN : $tablename does not have any primary key...")
#end
#if ( $isPresentLock )
            $lockColumn.getJavaType() oldLockValue = bean.$strUtil.getGetMethod($lockColumn)();
            bean.$strUtil.getSetMethod($lockColumn))(new $lockColumn.getJavaType()(String.valueOf(System.currentTimeMillis())));

#end
            sql = new StringBuffer("UPDATE $tablename SET ");
            boolean useComma=false;
#foreach( $column in $columns )

            if (bean.$strUtil.getModifiedMethod($column)()) {
                if (useComma) {
                    sql.append(",");
                } else {
                    useComma=true;
                }
                sql.append("$column.getName()").append("=?");
            }
#end
#if ( $primaryKeys.size() > 0 )
            sql.append(" WHERE ");
#end
#set ($sql = "" )
#macro ( sqlAppend $somestr )
#set ( $sql = "$!sql$somestr" )
#end
#foreach( $primaryKey in $primaryKeys )
#if ( $velocityCount > 1 )#sqlAppend( " AND " )#end
#sqlAppend( "$primaryKey.getName()=?" )
#end
#if ( $isPresentLock )
#if ( $primaryKeys.size() > 0 )#sqlAppend( " AND " )#end
#sqlAppend( "$lockColumn.getName()=?")
#end
            sql.append("$sql");
            if (log.isTraceEnabled()) log.trace("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                if (log.isTraceEnabled()) log.trace("The bean to look is not initialized... do not update.");
                return bean;
            }

#foreach ( $pKey in $primaryKeys )
            $pKey.getPreparedStatementMethod("bean.$strUtil.getGetMethod($pKey)()", "++_dirtyCount")
#end
#if ( $isPresentLock )
            $lockColumn.getPreparedStatementMethod( "oldLockValue", "++_dirtyCount")
            if (ps.executeUpdate()==0) {
                throw new SQLException("sql2java.exception.optimisticlock");
            }
#else
            ps.executeUpdate();
#end
            bean.resetIsModified();

            return bean;
        }
        finally
        {
            sql = null;
            close(ps);
            releaseConnection(c);
        }
    }


    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________

    /**
     * Loads a List of $beanClass from a template one, given the start row and number of rows.
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the $beanClass matching the template
     */
    //20
    public List<$beanClass> loadUsingTemplate($beanClass bean, int startRow, int numRows, int searchType) throws SQLException
    {
        if (log.isTraceEnabled()) log.trace("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM $tablename ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (fillWhere(sqlWhere, bean, searchType) == 0) {
               if (log.isTraceEnabled()) log.trace("The bean to look is not initialized... loading all");
            } else {
                sql.append(" WHERE ").append(sqlWhere);
            }
            if (log.isTraceEnabled()) log.trace("loadUsingTemplate: " + sql.toString());

            c = getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1)
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            fillPreparedStatement(ps, bean, searchType);

            //ps.executeQuery();
            return loadByPreparedStatement(ps, null, startRow, numRows);
        }
        finally
        {
            close(ps);
            releaseConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a $beanClass template.
     *
     * @param bean the $beanClass object(s) to be deleted
     * @return the number of deleted objects
     */
    //21
    public int deleteUsingTemplate($beanClass bean) throws SQLException
    {
#if ( $primaryKeys.size() == 1)
        if (bean.$strUtil.getInitializedMethod($primaryKeys.get(0))())
            return deleteByPrimaryKey(bean.$strUtil.getGetMethod($primaryKeys.get(0))());

#end
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM $tablename ");;
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (fillWhere(sqlWhere, bean, SEARCH_EXACT) == 0) {
               if (log.isTraceEnabled()) log.trace("The bean to look is not initialized... deleting all");
            } else {
                sql.append(" WHERE ").append(sqlWhere);
            }
            if (log.isTraceEnabled()) log.trace("deleteUsingTemplate: " + sql.toString());

            c = getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            close(ps);
            releaseConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table $tablename with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    //25
    public int countWhere(String where) throws SQLException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM $tablename " + where;
        if (log.isTraceEnabled()) log.trace("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            close(st, rs);
            releaseConnection(c);
            sql = null;
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table $tablename with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //26
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific $beanClass bean given the start row and number of rows and the search type
     *
     * @param bean the $beanClass template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     */
    //20
    public int countUsingTemplate($beanClass bean, int startRow, int numRows, int searchType) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM $tablename");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (fillWhere(sqlWhere, bean, SEARCH_EXACT) == 0) {
               if (log.isTraceEnabled()) log.trace("The bean to look is not initialized... counting all...");
            } else {
                sql.append(" WHERE ").append(sqlWhere);
            }
            if (log.isTraceEnabled()) log.trace("countUsingTemplate: " + sql.toString());

            c = getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            fillPreparedStatement(ps, bean, searchType);

            return countByPreparedStatement(ps);
        }
        finally
        {
            close(ps);
            releaseConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, $beanClass bean, int searchType) throws SQLException
    {
        if (bean == null)
            return 0;
        int _dirtyCount = 0;
        StringBuffer sqlEqualsOperation = new StringBuffer("=");
        StringBuffer sqlOperation = new StringBuffer("=");
        if (searchType != SEARCH_EXACT)
            sqlOperation = new StringBuffer(" like ");
        try
        {
#foreach( $column in $columns )
            if (bean.$strUtil.getModifiedMethod($column)()) {
                _dirtyCount ++;
#if ($column.isString())
                sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("$column.getName() ").append(sqlOperation).append("?");
#else
                sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("$column.getName() ").append(sqlEqualsOperation).append("?");
#end
            }
#end
        }
        finally
        {
            sqlEqualsOperation = null;
            sqlOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillPreparedStatement(PreparedStatement ps, $beanClass bean, int searchType) throws SQLException
    {
        if (bean == null)
            return 0;
        int _dirtyCount = 0;
#foreach ( $column in $columns )
        if (bean.$strUtil.getModifiedMethod($column)()) {
#if ($column.isString())
            switch (searchType){
                case SEARCH_EXACT:
                    if (log.isTraceEnabled()) log.trace("Setting for " + _dirtyCount + " [" + bean.$strUtil.getGetMethod($column)() + "]");
                    $column.getPreparedStatementMethod("bean.$strUtil.getGetMethod($column)()", "++_dirtyCount");
                    break;
                case SEARCH_LIKE:
                    if (log.isTraceEnabled()) log.trace("Setting for " + _dirtyCount + " [%" + bean.$strUtil.getGetMethod($column)() + "%]");
                    $column.getPreparedStatementMethod("${Q}%${Q} + bean.$strUtil.getGetMethod($column)() + ${Q}%${Q}", "++_dirtyCount");
                    break;
                case SEARCH_STARTING_LIKE:
                    if (log.isTraceEnabled()) log.trace("Setting for " + _dirtyCount + " [" + bean.$strUtil.getGetMethod($column)() + "%]");
                    $column.getPreparedStatementMethod("${Q}%${Q} + bean.$strUtil.getGetMethod($column)()", "++_dirtyCount");
                    break;
                case SEARCH_ENDING_LIKE:
                    if (log.isTraceEnabled()) log.trace("Setting for " + _dirtyCount + " [%" + bean.$strUtil.getGetMethod($column)() + "]");
                    $column.getPreparedStatementMethod("bean.$strUtil.getGetMethod($column)() + ${Q}%${Q}", "++_dirtyCount");
                    break;
                }
#else
            if (log.isTraceEnabled()) log.trace("Setting for " + _dirtyCount + " [" + bean.$strUtil.getGetMethod($column)() + "]");
            $column.getPreparedStatementMethod("bean.$strUtil.getGetMethod($column)()", "++_dirtyCount");
#end
        }
#end
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________


    /**
     * Transforms a ResultSet iterating on the $tablename on a $beanClass bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting $beanClass bean
     */
    //29
    public $beanClass decodeRow(ResultSet rs) throws SQLException
    {
        $beanClass bean = create$beanClass();
## the set statement casts $velocityCount to a string
#foreach ( $column in $columns )
#set ($vCount = "$velocityCount" )
        bean.$strUtil.getSetMethod($column)($column.getResultSetMethodObject($vCount));
#end

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the $tablename table on a $beanClass bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting $beanClass bean
     */
    //30
    public $beanClass decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        $beanClass bean = create$beanClass();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i])
            {
#foreach( $column in $columns )
                case ID_$column.getConstName():
                    ++pos;
                    bean.$strUtil.getSetMethod($column)($column.getResultSetMethodObject("pos"));
                    break;
#end
            }
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the $tablename on a $beanClass bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting $beanClass bean
     */
    //31
    public $beanClass metaDataDecodeRow(ResultSet rs) throws SQLException
    {
        $beanClass bean = create$beanClass();
#foreach ( $column in $columns )
        bean.$strUtil.getSetMethod($column)($column.getResultSetMethodObject("${Q}$column.getName()${Q}"));
#end

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

}
